// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raft/raft.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "raft/raft.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace floyd {
namespace raft {

namespace {

const ::google::protobuf::Descriptor* Entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    Entry_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Entry_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* RequestVote_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    RequestVote_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseVote_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    ResponseVote_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppendEntriesRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    AppendEntriesRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppendEntriesResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
    AppendEntriesResponse_reflection_ = NULL;

}  // namespace

void protobuf_AssignDesc_raft_2fraft_2eproto() {
  protobuf_AddDesc_raft_2fraft_2eproto();
  const ::google::protobuf::FileDescriptor* file =
      ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
          "raft/raft.proto");
  GOOGLE_CHECK(file != NULL);
  Entry_descriptor_ = file->message_type(0);
  static const int Entry_offsets_[3] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entry, type_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entry, term_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entry, cmd_), };
  Entry_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          Entry_descriptor_, Entry::default_instance_, Entry_offsets_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entry, _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entry,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(Entry));
  Entry_Type_descriptor_ = Entry_descriptor_->enum_type(0);
  RequestVote_descriptor_ = file->message_type(1);
  static const int RequestVote_offsets_[5] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestVote, ip_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestVote, port_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestVote, term_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestVote,
                                                     last_log_term_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestVote,
                                                     last_log_index_), };
  RequestVote_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          RequestVote_descriptor_, RequestVote::default_instance_,
          RequestVote_offsets_, GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                                    RequestVote, _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestVote,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(RequestVote));
  ResponseVote_descriptor_ = file->message_type(2);
  static const int ResponseVote_offsets_[2] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseVote, term_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseVote, granted_), };
  ResponseVote_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          ResponseVote_descriptor_, ResponseVote::default_instance_,
          ResponseVote_offsets_, GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                                     ResponseVote, _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseVote,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(ResponseVote));
  AppendEntriesRequest_descriptor_ = file->message_type(3);
  static const int AppendEntriesRequest_offsets_[7] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesRequest, ip_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesRequest,
                                                     port_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesRequest,
                                                     term_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesRequest,
                                                     prev_log_index_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesRequest,
                                                     prev_log_term_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesRequest,
                                                     commit_index_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesRequest,
                                                     entries_), };
  AppendEntriesRequest_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          AppendEntriesRequest_descriptor_,
          AppendEntriesRequest::default_instance_,
          AppendEntriesRequest_offsets_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesRequest,
                                                         _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesRequest,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(AppendEntriesRequest));
  AppendEntriesResponse_descriptor_ = file->message_type(4);
  static const int AppendEntriesResponse_offsets_[2] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesResponse,
                                                     status_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesResponse,
                                                     term_), };
  AppendEntriesResponse_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          AppendEntriesResponse_descriptor_,
          AppendEntriesResponse::default_instance_,
          AppendEntriesResponse_offsets_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesResponse,
                                                         _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesResponse,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(AppendEntriesResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                                     &protobuf_AssignDesc_raft_2fraft_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Entry_descriptor_, &Entry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RequestVote_descriptor_, &RequestVote::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResponseVote_descriptor_, &ResponseVote::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AppendEntriesRequest_descriptor_,
      &AppendEntriesRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AppendEntriesResponse_descriptor_,
      &AppendEntriesResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_raft_2fraft_2eproto() {
  delete Entry::default_instance_;
  delete Entry_reflection_;
  delete RequestVote::default_instance_;
  delete RequestVote_reflection_;
  delete ResponseVote::default_instance_;
  delete ResponseVote_reflection_;
  delete AppendEntriesRequest::default_instance_;
  delete AppendEntriesRequest_reflection_;
  delete AppendEntriesResponse::default_instance_;
  delete AppendEntriesResponse_reflection_;
}

void protobuf_AddDesc_raft_2fraft_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      "\n\017raft/raft.proto\022\nfloyd.raft\"d\n\005Entry\022$"
      "\n\004type\030\001 \002(\0162\026.floyd.raft.Entry.Type\022\014\n\004"
      "term\030\002 \002(\004\022\013\n\003cmd\030\003 "
      "\001(\014\"\032\n\004Type\022\010\n\004DATA\020"
      "\000\022\010\n\004NOOP\020\001\"d\n\013RequestVote\022\n\n\002ip\030\001"
      " \002(\014\022\014"
      "\n\004port\030\002 \002(\005\022\014\n\004term\030\003 "
      "\002(\004\022\025\n\rlast_log_t"
      "erm\030\004 \002(\004\022\026\n\016last_log_index\030\005 "
      "\002(\004\"-\n\014Res"
      "ponseVote\022\014\n\004term\030\001 "
      "\002(\004\022\017\n\007granted\030\002 \002(\010"
      "\"\247\001\n\024AppendEntriesRequest\022\n\n\002ip\030\001 "
      "\002(\014\022\014\n"
      "\004port\030\002 \002(\005\022\014\n\004term\030\003 "
      "\002(\004\022\026\n\016prev_log_in"
      "dex\030\004 \002(\004\022\025\n\rprev_log_term\030\005 "
      "\002(\004\022\024\n\014comm"
      "it_index\030\006 \002(\004\022\"\n\007entries\030\007 "
      "\003(\0132\021.floyd."
      "raft.Entry\"5\n\025AppendEntriesResponse\022\016\n\006s"
      "tatus\030\001 \002(\010\022\014\n\004term\030\002 \002(\004",
      505);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
      "raft/raft.proto", &protobuf_RegisterTypes);
  Entry::default_instance_ = new Entry();
  RequestVote::default_instance_ = new RequestVote();
  ResponseVote::default_instance_ = new ResponseVote();
  AppendEntriesRequest::default_instance_ = new AppendEntriesRequest();
  AppendEntriesResponse::default_instance_ = new AppendEntriesResponse();
  Entry::default_instance_->InitAsDefaultInstance();
  RequestVote::default_instance_->InitAsDefaultInstance();
  ResponseVote::default_instance_->InitAsDefaultInstance();
  AppendEntriesRequest::default_instance_->InitAsDefaultInstance();
  AppendEntriesResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(
      &protobuf_ShutdownFile_raft_2fraft_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_raft_2fraft_2eproto {
  StaticDescriptorInitializer_raft_2fraft_2eproto() {
    protobuf_AddDesc_raft_2fraft_2eproto();
  }
} static_descriptor_initializer_raft_2fraft_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Entry_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Entry_Type_descriptor_;
}
bool Entry_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Entry_Type Entry::DATA;
const Entry_Type Entry::NOOP;
const Entry_Type Entry::Type_MIN;
const Entry_Type Entry::Type_MAX;
const int Entry::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Entry::kTypeFieldNumber;
const int Entry::kTermFieldNumber;
const int Entry::kCmdFieldNumber;
#endif  // !_MSC_VER

Entry::Entry() : ::google::protobuf::Message() { SharedCtor(); }

void Entry::InitAsDefaultInstance() {}

Entry::Entry(const Entry& from) : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Entry::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  term_ = GOOGLE_ULONGLONG(0);
  cmd_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Entry::~Entry() { SharedDtor(); }

void Entry::SharedDtor() {
  if (cmd_ != &::google::protobuf::internal::kEmptyString) {
    delete cmd_;
  }
  if (this != default_instance_) {
  }
}

void Entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Entry_descriptor_;
}

const Entry& Entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_2fraft_2eproto();
  return *default_instance_;
}

Entry* Entry::default_instance_ = NULL;

Entry* Entry::New() const { return new Entry; }

void Entry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    term_ = GOOGLE_ULONGLONG(0);
    if (has_cmd()) {
      if (cmd_ != &::google::protobuf::internal::kEmptyString) {
        cmd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .floyd.raft.Entry.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
              input, &value)));
          if (::floyd::raft::Entry_Type_IsValid(value)) {
            set_type(static_cast< ::floyd::raft::Entry_Type>(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_term;
        break;
      }

      // required uint64 term = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::uint64,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
              input, &term_)));
          set_has_term();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cmd;
        break;
      }

      // optional bytes cmd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_cmd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_cmd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .floyd.raft.Entry.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(1, this->type(),
                                                            output);
  }

  // required uint64 term = 2;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->term(),
                                                              output);
  }

  // optional bytes cmd = 3;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(3, this->cmd(),
                                                             output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Entry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .floyd.raft.Entry.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
        1, this->type(), target);
  }

  // required uint64 term = 2;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(
        2, this->term(), target);
  }

  // optional bytes cmd = 3;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->cmd(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int Entry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .floyd.raft.Entry.Type type = 1;
    if (has_type()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(
                            this->type());
    }

    // required uint64 term = 2;
    if (has_term()) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::UInt64Size(
                  this->term());
    }

    // optional bytes cmd = 3;
    if (has_cmd()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->cmd());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Entry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Entry* source =
      ::google::protobuf::internal::dynamic_cast_if_available<const Entry*>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Entry::MergeFrom(const Entry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_term()) {
      set_term(from.term());
    }
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Entry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Entry::CopyFrom(const Entry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Entry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Entry::Swap(Entry* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(term_, other->term_);
    std::swap(cmd_, other->cmd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Entry_descriptor_;
  metadata.reflection = Entry_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int RequestVote::kIpFieldNumber;
const int RequestVote::kPortFieldNumber;
const int RequestVote::kTermFieldNumber;
const int RequestVote::kLastLogTermFieldNumber;
const int RequestVote::kLastLogIndexFieldNumber;
#endif  // !_MSC_VER

RequestVote::RequestVote() : ::google::protobuf::Message() { SharedCtor(); }

void RequestVote::InitAsDefaultInstance() {}

RequestVote::RequestVote(const RequestVote& from)
    : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestVote::SharedCtor() {
  _cached_size_ = 0;
  ip_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  term_ = GOOGLE_ULONGLONG(0);
  last_log_term_ = GOOGLE_ULONGLONG(0);
  last_log_index_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestVote::~RequestVote() { SharedDtor(); }

void RequestVote::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void RequestVote::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestVote::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestVote_descriptor_;
}

const RequestVote& RequestVote::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_2fraft_2eproto();
  return *default_instance_;
}

RequestVote* RequestVote::default_instance_ = NULL;

RequestVote* RequestVote::New() const { return new RequestVote; }

void RequestVote::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0;
    term_ = GOOGLE_ULONGLONG(0);
    last_log_term_ = GOOGLE_ULONGLONG(0);
    last_log_index_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestVote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_ip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // required int32 port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_term;
        break;
      }

      // required uint64 term = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::uint64,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
              input, &term_)));
          set_has_term();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_last_log_term;
        break;
      }

      // required uint64 last_log_term = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_last_log_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::uint64,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
              input, &last_log_term_)));
          set_has_last_log_term();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_last_log_index;
        break;
      }

      // required uint64 last_log_index = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_last_log_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::uint64,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
              input, &last_log_index_)));
          set_has_last_log_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestVote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(1, this->ip(),
                                                             output);
  }

  // required int32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(),
                                                             output);
  }

  // required uint64 term = 3;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->term(),
                                                              output);
  }

  // required uint64 last_log_term = 4;
  if (has_last_log_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
        4, this->last_log_term(), output);
  }

  // required uint64 last_log_index = 5;
  if (has_last_log_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
        5, this->last_log_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestVote::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes ip = 1;
  if (has_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->ip(), target);
  }

  // required int32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        2, this->port(), target);
  }

  // required uint64 term = 3;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(
        3, this->term(), target);
  }

  // required uint64 last_log_term = 4;
  if (has_last_log_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(
        4, this->last_log_term(), target);
  }

  // required uint64 last_log_index = 5;
  if (has_last_log_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(
        5, this->last_log_index(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int RequestVote::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes ip = 1;
    if (has_ip()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->ip());
    }

    // required int32 port = 2;
    if (has_port()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->port());
    }

    // required uint64 term = 3;
    if (has_term()) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::UInt64Size(
                  this->term());
    }

    // required uint64 last_log_term = 4;
    if (has_last_log_term()) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::UInt64Size(
                  this->last_log_term());
    }

    // required uint64 last_log_index = 5;
    if (has_last_log_index()) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::UInt64Size(
                  this->last_log_index());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestVote::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestVote* source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const RequestVote*>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestVote::MergeFrom(const RequestVote& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_term()) {
      set_term(from.term());
    }
    if (from.has_last_log_term()) {
      set_last_log_term(from.last_log_term());
    }
    if (from.has_last_log_index()) {
      set_last_log_index(from.last_log_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestVote::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestVote::CopyFrom(const RequestVote& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestVote::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void RequestVote::Swap(RequestVote* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(term_, other->term_);
    std::swap(last_log_term_, other->last_log_term_);
    std::swap(last_log_index_, other->last_log_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestVote::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestVote_descriptor_;
  metadata.reflection = RequestVote_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int ResponseVote::kTermFieldNumber;
const int ResponseVote::kGrantedFieldNumber;
#endif  // !_MSC_VER

ResponseVote::ResponseVote() : ::google::protobuf::Message() { SharedCtor(); }

void ResponseVote::InitAsDefaultInstance() {}

ResponseVote::ResponseVote(const ResponseVote& from)
    : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseVote::SharedCtor() {
  _cached_size_ = 0;
  term_ = GOOGLE_ULONGLONG(0);
  granted_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseVote::~ResponseVote() { SharedDtor(); }

void ResponseVote::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResponseVote::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseVote::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseVote_descriptor_;
}

const ResponseVote& ResponseVote::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_2fraft_2eproto();
  return *default_instance_;
}

ResponseVote* ResponseVote::default_instance_ = NULL;

ResponseVote* ResponseVote::New() const { return new ResponseVote; }

void ResponseVote::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    term_ = GOOGLE_ULONGLONG(0);
    granted_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseVote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 term = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::uint64,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
              input, &term_)));
          set_has_term();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_granted;
        break;
      }

      // required bool granted = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_granted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
              input, &granted_)));
          set_has_granted();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseVote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 term = 1;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->term(),
                                                              output);
  }

  // required bool granted = 2;
  if (has_granted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->granted(),
                                                            output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseVote::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 term = 1;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(
        1, this->term(), target);
  }

  // required bool granted = 2;
  if (has_granted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(
        2, this->granted(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int ResponseVote::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 term = 1;
    if (has_term()) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::UInt64Size(
                  this->term());
    }

    // required bool granted = 2;
    if (has_granted()) {
      total_size += 1 + 1;
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseVote::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseVote* source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const ResponseVote*>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseVote::MergeFrom(const ResponseVote& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_term()) {
      set_term(from.term());
    }
    if (from.has_granted()) {
      set_granted(from.granted());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseVote::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseVote::CopyFrom(const ResponseVote& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseVote::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ResponseVote::Swap(ResponseVote* other) {
  if (other != this) {
    std::swap(term_, other->term_);
    std::swap(granted_, other->granted_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseVote::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseVote_descriptor_;
  metadata.reflection = ResponseVote_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int AppendEntriesRequest::kIpFieldNumber;
const int AppendEntriesRequest::kPortFieldNumber;
const int AppendEntriesRequest::kTermFieldNumber;
const int AppendEntriesRequest::kPrevLogIndexFieldNumber;
const int AppendEntriesRequest::kPrevLogTermFieldNumber;
const int AppendEntriesRequest::kCommitIndexFieldNumber;
const int AppendEntriesRequest::kEntriesFieldNumber;
#endif  // !_MSC_VER

AppendEntriesRequest::AppendEntriesRequest() : ::google::protobuf::Message() {
  SharedCtor();
}

void AppendEntriesRequest::InitAsDefaultInstance() {}

AppendEntriesRequest::AppendEntriesRequest(const AppendEntriesRequest& from)
    : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AppendEntriesRequest::SharedCtor() {
  _cached_size_ = 0;
  ip_ =
      const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  term_ = GOOGLE_ULONGLONG(0);
  prev_log_index_ = GOOGLE_ULONGLONG(0);
  prev_log_term_ = GOOGLE_ULONGLONG(0);
  commit_index_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppendEntriesRequest::~AppendEntriesRequest() { SharedDtor(); }

void AppendEntriesRequest::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void AppendEntriesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppendEntriesRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppendEntriesRequest_descriptor_;
}

const AppendEntriesRequest& AppendEntriesRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_2fraft_2eproto();
  return *default_instance_;
}

AppendEntriesRequest* AppendEntriesRequest::default_instance_ = NULL;

AppendEntriesRequest* AppendEntriesRequest::New() const {
  return new AppendEntriesRequest;
}

void AppendEntriesRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0;
    term_ = GOOGLE_ULONGLONG(0);
    prev_log_index_ = GOOGLE_ULONGLONG(0);
    prev_log_term_ = GOOGLE_ULONGLONG(0);
    commit_index_ = GOOGLE_ULONGLONG(0);
  }
  entries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppendEntriesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_ip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // required int32 port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_term;
        break;
      }

      // required uint64 term = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::uint64,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
              input, &term_)));
          set_has_term();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_prev_log_index;
        break;
      }

      // required uint64 prev_log_index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_prev_log_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::uint64,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
              input, &prev_log_index_)));
          set_has_prev_log_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_prev_log_term;
        break;
      }

      // required uint64 prev_log_term = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_prev_log_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::uint64,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
              input, &prev_log_term_)));
          set_has_prev_log_term();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_commit_index;
        break;
      }

      // required uint64 commit_index = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_commit_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::uint64,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
              input, &commit_index_)));
          set_has_commit_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_entries;
        break;
      }

      // repeated .floyd.raft.Entry entries = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::
                WIRETYPE_LENGTH_DELIMITED) {
        parse_entries:
          DO_(::google::protobuf::internal::WireFormatLite::
                  ReadMessageNoVirtual(input, add_entries()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_entries;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AppendEntriesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(1, this->ip(),
                                                             output);
  }

  // required int32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(),
                                                             output);
  }

  // required uint64 term = 3;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->term(),
                                                              output);
  }

  // required uint64 prev_log_index = 4;
  if (has_prev_log_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
        4, this->prev_log_index(), output);
  }

  // required uint64 prev_log_term = 5;
  if (has_prev_log_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
        5, this->prev_log_term(), output);
  }

  // required uint64 commit_index = 6;
  if (has_commit_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
        6, this->commit_index(), output);
  }

  // repeated .floyd.raft.Entry entries = 7;
  for (int i = 0; i < this->entries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        7, this->entries(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8*
AppendEntriesRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes ip = 1;
  if (has_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->ip(), target);
  }

  // required int32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        2, this->port(), target);
  }

  // required uint64 term = 3;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(
        3, this->term(), target);
  }

  // required uint64 prev_log_index = 4;
  if (has_prev_log_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(
        4, this->prev_log_index(), target);
  }

  // required uint64 prev_log_term = 5;
  if (has_prev_log_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(
        5, this->prev_log_term(), target);
  }

  // required uint64 commit_index = 6;
  if (has_commit_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(
        6, this->commit_index(), target);
  }

  // repeated .floyd.raft.Entry entries = 7;
  for (int i = 0; i < this->entries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteMessageNoVirtualToArray(7, this->entries(i), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int AppendEntriesRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes ip = 1;
    if (has_ip()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->ip());
    }

    // required int32 port = 2;
    if (has_port()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->port());
    }

    // required uint64 term = 3;
    if (has_term()) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::UInt64Size(
                  this->term());
    }

    // required uint64 prev_log_index = 4;
    if (has_prev_log_index()) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::UInt64Size(
                  this->prev_log_index());
    }

    // required uint64 prev_log_term = 5;
    if (has_prev_log_term()) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::UInt64Size(
                  this->prev_log_term());
    }

    // required uint64 commit_index = 6;
    if (has_commit_index()) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::UInt64Size(
                  this->commit_index());
    }
  }
  // repeated .floyd.raft.Entry entries = 7;
  total_size += 1 * this->entries_size();
  for (int i = 0; i < this->entries_size(); i++) {
    total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
            this->entries(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppendEntriesRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppendEntriesRequest* source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const AppendEntriesRequest*>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppendEntriesRequest::MergeFrom(const AppendEntriesRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  entries_.MergeFrom(from.entries_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_term()) {
      set_term(from.term());
    }
    if (from.has_prev_log_index()) {
      set_prev_log_index(from.prev_log_index());
    }
    if (from.has_prev_log_term()) {
      set_prev_log_term(from.prev_log_term());
    }
    if (from.has_commit_index()) {
      set_commit_index(from.commit_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppendEntriesRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppendEntriesRequest::CopyFrom(const AppendEntriesRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendEntriesRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  for (int i = 0; i < entries_size(); i++) {
    if (!this->entries(i).IsInitialized()) return false;
  }
  return true;
}

void AppendEntriesRequest::Swap(AppendEntriesRequest* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(term_, other->term_);
    std::swap(prev_log_index_, other->prev_log_index_);
    std::swap(prev_log_term_, other->prev_log_term_);
    std::swap(commit_index_, other->commit_index_);
    entries_.Swap(&other->entries_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppendEntriesRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppendEntriesRequest_descriptor_;
  metadata.reflection = AppendEntriesRequest_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int AppendEntriesResponse::kStatusFieldNumber;
const int AppendEntriesResponse::kTermFieldNumber;
#endif  // !_MSC_VER

AppendEntriesResponse::AppendEntriesResponse() : ::google::protobuf::Message() {
  SharedCtor();
}

void AppendEntriesResponse::InitAsDefaultInstance() {}

AppendEntriesResponse::AppendEntriesResponse(const AppendEntriesResponse& from)
    : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AppendEntriesResponse::SharedCtor() {
  _cached_size_ = 0;
  status_ = false;
  term_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppendEntriesResponse::~AppendEntriesResponse() { SharedDtor(); }

void AppendEntriesResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AppendEntriesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppendEntriesResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppendEntriesResponse_descriptor_;
}

const AppendEntriesResponse& AppendEntriesResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_2fraft_2eproto();
  return *default_instance_;
}

AppendEntriesResponse* AppendEntriesResponse::default_instance_ = NULL;

AppendEntriesResponse* AppendEntriesResponse::New() const {
  return new AppendEntriesResponse;
}

void AppendEntriesResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = false;
    term_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppendEntriesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
              input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_term;
        break;
      }

      // required uint64 term = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
        parse_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
              ::google::protobuf::uint64,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
              input, &term_)));
          set_has_term();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AppendEntriesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->status(),
                                                            output);
  }

  // required uint64 term = 2;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->term(),
                                                              output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8*
AppendEntriesResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(
        1, this->status(), target);
  }

  // required uint64 term = 2;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(
        2, this->term(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  return target;
}

int AppendEntriesResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool status = 1;
    if (has_status()) {
      total_size += 1 + 1;
    }

    // required uint64 term = 2;
    if (has_term()) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::UInt64Size(
                  this->term());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppendEntriesResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppendEntriesResponse* source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const AppendEntriesResponse*>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppendEntriesResponse::MergeFrom(const AppendEntriesResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_term()) {
      set_term(from.term());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppendEntriesResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppendEntriesResponse::CopyFrom(const AppendEntriesResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendEntriesResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AppendEntriesResponse::Swap(AppendEntriesResponse* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(term_, other->term_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppendEntriesResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppendEntriesResponse_descriptor_;
  metadata.reflection = AppendEntriesResponse_reflection_;
  return metadata;
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace raft
}  // namespace floyd

// @@protoc_insertion_point(global_scope)
