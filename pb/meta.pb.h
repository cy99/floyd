// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: meta.proto

#ifndef PROTOBUF_meta_2eproto__INCLUDED
#define PROTOBUF_meta_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace meta {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_meta_2eproto();
void protobuf_AssignDesc_meta_2eproto();
void protobuf_ShutdownFile_meta_2eproto();

class Meta;
class Meta_Node;
class MetaRes;
class MetaRes_Node;

enum Meta_Type {
  Meta_Type_PING = 0,
  Meta_Type_NODE = 1
};
bool Meta_Type_IsValid(int value);
const Meta_Type Meta_Type_Type_MIN = Meta_Type_PING;
const Meta_Type Meta_Type_Type_MAX = Meta_Type_NODE;
const int Meta_Type_Type_ARRAYSIZE = Meta_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Meta_Type_descriptor();
inline const ::std::string& Meta_Type_Name(Meta_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Meta_Type_descriptor(), value);
}
inline bool Meta_Type_Parse(
    const ::std::string& name, Meta_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Meta_Type>(
    Meta_Type_descriptor(), name, value);
}
// ===================================================================

class Meta_Node : public ::google::protobuf::Message {
 public:
  Meta_Node();
  virtual ~Meta_Node();

  Meta_Node(const Meta_Node& from);

  inline Meta_Node& operator=(const Meta_Node& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Meta_Node& default_instance();

  void Swap(Meta_Node* other);

  // implements Message ----------------------------------------------

  Meta_Node* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Meta_Node& from);
  void MergeFrom(const Meta_Node& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes ip = 1;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 1;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const void* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // required int32 port = 2;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:meta.Meta.Node)
 private:
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* ip_;
  ::google::protobuf::int32 port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_meta_2eproto();
  friend void protobuf_AssignDesc_meta_2eproto();
  friend void protobuf_ShutdownFile_meta_2eproto();

  void InitAsDefaultInstance();
  static Meta_Node* default_instance_;
};
// -------------------------------------------------------------------

class Meta : public ::google::protobuf::Message {
 public:
  Meta();
  virtual ~Meta();

  Meta(const Meta& from);

  inline Meta& operator=(const Meta& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Meta& default_instance();

  void Swap(Meta* other);

  // implements Message ----------------------------------------------

  Meta* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Meta& from);
  void MergeFrom(const Meta& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Meta_Node Node;

  typedef Meta_Type Type;
  static const Type PING = Meta_Type_PING;
  static const Type NODE = Meta_Type_NODE;
  static inline bool Type_IsValid(int value) {
    return Meta_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Meta_Type_Type_MIN;
  static const Type Type_MAX =
    Meta_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Meta_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Meta_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Meta_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Meta_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .meta.Meta.Type t = 1;
  inline bool has_t() const;
  inline void clear_t();
  static const int kTFieldNumber = 1;
  inline ::meta::Meta_Type t() const;
  inline void set_t(::meta::Meta_Type value);

  // repeated .meta.Meta.Node nodes = 2;
  inline int nodes_size() const;
  inline void clear_nodes();
  static const int kNodesFieldNumber = 2;
  inline const ::meta::Meta_Node& nodes(int index) const;
  inline ::meta::Meta_Node* mutable_nodes(int index);
  inline ::meta::Meta_Node* add_nodes();
  inline const ::google::protobuf::RepeatedPtrField< ::meta::Meta_Node >&
      nodes() const;
  inline ::google::protobuf::RepeatedPtrField< ::meta::Meta_Node >*
      mutable_nodes();

  // @@protoc_insertion_point(class_scope:meta.Meta)
 private:
  inline void set_has_t();
  inline void clear_has_t();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::meta::Meta_Node > nodes_;
  int t_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_meta_2eproto();
  friend void protobuf_AssignDesc_meta_2eproto();
  friend void protobuf_ShutdownFile_meta_2eproto();

  void InitAsDefaultInstance();
  static Meta* default_instance_;
};
// -------------------------------------------------------------------

class MetaRes_Node : public ::google::protobuf::Message {
 public:
  MetaRes_Node();
  virtual ~MetaRes_Node();

  MetaRes_Node(const MetaRes_Node& from);

  inline MetaRes_Node& operator=(const MetaRes_Node& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MetaRes_Node& default_instance();

  void Swap(MetaRes_Node* other);

  // implements Message ----------------------------------------------

  MetaRes_Node* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MetaRes_Node& from);
  void MergeFrom(const MetaRes_Node& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes ip = 1;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 1;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const void* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // required int32 port = 2;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:meta.MetaRes.Node)
 private:
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* ip_;
  ::google::protobuf::int32 port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_meta_2eproto();
  friend void protobuf_AssignDesc_meta_2eproto();
  friend void protobuf_ShutdownFile_meta_2eproto();

  void InitAsDefaultInstance();
  static MetaRes_Node* default_instance_;
};
// -------------------------------------------------------------------

class MetaRes : public ::google::protobuf::Message {
 public:
  MetaRes();
  virtual ~MetaRes();

  MetaRes(const MetaRes& from);

  inline MetaRes& operator=(const MetaRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MetaRes& default_instance();

  void Swap(MetaRes* other);

  // implements Message ----------------------------------------------

  MetaRes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MetaRes& from);
  void MergeFrom(const MetaRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MetaRes_Node Node;

  // accessors -------------------------------------------------------

  // repeated .meta.MetaRes.Node nodes = 1;
  inline int nodes_size() const;
  inline void clear_nodes();
  static const int kNodesFieldNumber = 1;
  inline const ::meta::MetaRes_Node& nodes(int index) const;
  inline ::meta::MetaRes_Node* mutable_nodes(int index);
  inline ::meta::MetaRes_Node* add_nodes();
  inline const ::google::protobuf::RepeatedPtrField< ::meta::MetaRes_Node >&
      nodes() const;
  inline ::google::protobuf::RepeatedPtrField< ::meta::MetaRes_Node >*
      mutable_nodes();

  // @@protoc_insertion_point(class_scope:meta.MetaRes)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::meta::MetaRes_Node > nodes_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_meta_2eproto();
  friend void protobuf_AssignDesc_meta_2eproto();
  friend void protobuf_ShutdownFile_meta_2eproto();

  void InitAsDefaultInstance();
  static MetaRes* default_instance_;
};
// ===================================================================


// ===================================================================

// Meta_Node

// required bytes ip = 1;
inline bool Meta_Node::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Meta_Node::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Meta_Node::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Meta_Node::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& Meta_Node::ip() const {
  return *ip_;
}
inline void Meta_Node::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void Meta_Node::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void Meta_Node::set_ip(const void* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Meta_Node::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* Meta_Node::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Meta_Node::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 port = 2;
inline bool Meta_Node::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Meta_Node::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Meta_Node::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Meta_Node::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 Meta_Node::port() const {
  return port_;
}
inline void Meta_Node::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// -------------------------------------------------------------------

// Meta

// required .meta.Meta.Type t = 1;
inline bool Meta::has_t() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Meta::set_has_t() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Meta::clear_has_t() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Meta::clear_t() {
  t_ = 0;
  clear_has_t();
}
inline ::meta::Meta_Type Meta::t() const {
  return static_cast< ::meta::Meta_Type >(t_);
}
inline void Meta::set_t(::meta::Meta_Type value) {
  assert(::meta::Meta_Type_IsValid(value));
  set_has_t();
  t_ = value;
}

// repeated .meta.Meta.Node nodes = 2;
inline int Meta::nodes_size() const {
  return nodes_.size();
}
inline void Meta::clear_nodes() {
  nodes_.Clear();
}
inline const ::meta::Meta_Node& Meta::nodes(int index) const {
  return nodes_.Get(index);
}
inline ::meta::Meta_Node* Meta::mutable_nodes(int index) {
  return nodes_.Mutable(index);
}
inline ::meta::Meta_Node* Meta::add_nodes() {
  return nodes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::meta::Meta_Node >&
Meta::nodes() const {
  return nodes_;
}
inline ::google::protobuf::RepeatedPtrField< ::meta::Meta_Node >*
Meta::mutable_nodes() {
  return &nodes_;
}

// -------------------------------------------------------------------

// MetaRes_Node

// required bytes ip = 1;
inline bool MetaRes_Node::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MetaRes_Node::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MetaRes_Node::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MetaRes_Node::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& MetaRes_Node::ip() const {
  return *ip_;
}
inline void MetaRes_Node::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void MetaRes_Node::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void MetaRes_Node::set_ip(const void* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MetaRes_Node::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* MetaRes_Node::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MetaRes_Node::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 port = 2;
inline bool MetaRes_Node::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MetaRes_Node::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MetaRes_Node::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MetaRes_Node::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 MetaRes_Node::port() const {
  return port_;
}
inline void MetaRes_Node::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// -------------------------------------------------------------------

// MetaRes

// repeated .meta.MetaRes.Node nodes = 1;
inline int MetaRes::nodes_size() const {
  return nodes_.size();
}
inline void MetaRes::clear_nodes() {
  nodes_.Clear();
}
inline const ::meta::MetaRes_Node& MetaRes::nodes(int index) const {
  return nodes_.Get(index);
}
inline ::meta::MetaRes_Node* MetaRes::mutable_nodes(int index) {
  return nodes_.Mutable(index);
}
inline ::meta::MetaRes_Node* MetaRes::add_nodes() {
  return nodes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::meta::MetaRes_Node >&
MetaRes::nodes() const {
  return nodes_;
}
inline ::google::protobuf::RepeatedPtrField< ::meta::MetaRes_Node >*
MetaRes::mutable_nodes() {
  return &nodes_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace meta

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::meta::Meta_Type>() {
  return ::meta::Meta_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_meta_2eproto__INCLUDED
