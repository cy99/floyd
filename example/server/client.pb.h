// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.proto

#ifndef PROTOBUF_client_2eproto__INCLUDED
#define PROTOBUF_client_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace floyd {
namespace client {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_client_2eproto();
void protobuf_AssignDesc_client_2eproto();
void protobuf_ShutdownFile_client_2eproto();

class Request;
class Request_Write;
class Request_Read;
class Response;
class Response_Write;
class Response_Read;
class Response_ServerStatus;

enum Type {
  WRITE = 1,
  READ = 2,
  STATUS = 3
};
bool Type_IsValid(int value);
const Type Type_MIN = WRITE;
const Type Type_MAX = STATUS;
const int Type_ARRAYSIZE = Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Type_descriptor();
inline const ::std::string& Type_Name(Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Type_descriptor(), value);
}
inline bool Type_Parse(
    const ::std::string& name, Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Type>(
    Type_descriptor(), name, value);
}
// ===================================================================

class Request_Write : public ::google::protobuf::Message {
 public:
  Request_Write();
  virtual ~Request_Write();

  Request_Write(const Request_Write& from);

  inline Request_Write& operator=(const Request_Write& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request_Write& default_instance();

  void Swap(Request_Write* other);

  // implements Message ----------------------------------------------

  Request_Write* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request_Write& from);
  void MergeFrom(const Request_Write& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const void* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required bytes value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // optional bytes uuid = 3;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 3;
  inline const ::std::string& uuid() const;
  inline void set_uuid(const ::std::string& value);
  inline void set_uuid(const char* value);
  inline void set_uuid(const void* value, size_t size);
  inline ::std::string* mutable_uuid();
  inline ::std::string* release_uuid();
  inline void set_allocated_uuid(::std::string* uuid);

  // @@protoc_insertion_point(class_scope:floyd.client.Request.Write)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_uuid();
  inline void clear_has_uuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* key_;
  ::std::string* value_;
  ::std::string* uuid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eproto();
  friend void protobuf_AssignDesc_client_2eproto();
  friend void protobuf_ShutdownFile_client_2eproto();

  void InitAsDefaultInstance();
  static Request_Write* default_instance_;
};
// -------------------------------------------------------------------

class Request_Read : public ::google::protobuf::Message {
 public:
  Request_Read();
  virtual ~Request_Read();

  Request_Read(const Request_Read& from);

  inline Request_Read& operator=(const Request_Read& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request_Read& default_instance();

  void Swap(Request_Read* other);

  // implements Message ----------------------------------------------

  Request_Read* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request_Read& from);
  void MergeFrom(const Request_Read& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const void* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // @@protoc_insertion_point(class_scope:floyd.client.Request.Read)
 private:
  inline void set_has_key();
  inline void clear_has_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* key_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eproto();
  friend void protobuf_AssignDesc_client_2eproto();
  friend void protobuf_ShutdownFile_client_2eproto();

  void InitAsDefaultInstance();
  static Request_Read* default_instance_;
};
// -------------------------------------------------------------------

class Request : public ::google::protobuf::Message {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  void Swap(Request* other);

  // implements Message ----------------------------------------------

  Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Request_Write Write;
  typedef Request_Read Read;

  // accessors -------------------------------------------------------

  // required .floyd.client.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::floyd::client::Type type() const;
  inline void set_type(::floyd::client::Type value);

  // optional .floyd.client.Request.Write write = 2;
  inline bool has_write() const;
  inline void clear_write();
  static const int kWriteFieldNumber = 2;
  inline const ::floyd::client::Request_Write& write() const;
  inline ::floyd::client::Request_Write* mutable_write();
  inline ::floyd::client::Request_Write* release_write();
  inline void set_allocated_write(::floyd::client::Request_Write* write);

  // optional .floyd.client.Request.Read read = 3;
  inline bool has_read() const;
  inline void clear_read();
  static const int kReadFieldNumber = 3;
  inline const ::floyd::client::Request_Read& read() const;
  inline ::floyd::client::Request_Read* mutable_read();
  inline ::floyd::client::Request_Read* release_read();
  inline void set_allocated_read(::floyd::client::Request_Read* read);

  // @@protoc_insertion_point(class_scope:floyd.client.Request)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_write();
  inline void clear_has_write();
  inline void set_has_read();
  inline void clear_has_read();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::floyd::client::Request_Write* write_;
  ::floyd::client::Request_Read* read_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eproto();
  friend void protobuf_AssignDesc_client_2eproto();
  friend void protobuf_ShutdownFile_client_2eproto();

  void InitAsDefaultInstance();
  static Request* default_instance_;
};
// -------------------------------------------------------------------

class Response_Write : public ::google::protobuf::Message {
 public:
  Response_Write();
  virtual ~Response_Write();

  Response_Write(const Response_Write& from);

  inline Response_Write& operator=(const Response_Write& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response_Write& default_instance();

  void Swap(Response_Write* other);

  // implements Message ----------------------------------------------

  Response_Write* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response_Write& from);
  void MergeFrom(const Response_Write& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // optional bytes msg = 2;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const void* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:floyd.client.Response.Write)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msg_;
  ::google::protobuf::int32 status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eproto();
  friend void protobuf_AssignDesc_client_2eproto();
  friend void protobuf_ShutdownFile_client_2eproto();

  void InitAsDefaultInstance();
  static Response_Write* default_instance_;
};
// -------------------------------------------------------------------

class Response_Read : public ::google::protobuf::Message {
 public:
  Response_Read();
  virtual ~Response_Read();

  Response_Read(const Response_Read& from);

  inline Response_Read& operator=(const Response_Read& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response_Read& default_instance();

  void Swap(Response_Read* other);

  // implements Message ----------------------------------------------

  Response_Read* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response_Read& from);
  void MergeFrom(const Response_Read& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // optional bytes value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:floyd.client.Response.Read)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* value_;
  ::google::protobuf::int32 status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eproto();
  friend void protobuf_AssignDesc_client_2eproto();
  friend void protobuf_ShutdownFile_client_2eproto();

  void InitAsDefaultInstance();
  static Response_Read* default_instance_;
};
// -------------------------------------------------------------------

class Response_ServerStatus : public ::google::protobuf::Message {
 public:
  Response_ServerStatus();
  virtual ~Response_ServerStatus();

  Response_ServerStatus(const Response_ServerStatus& from);

  inline Response_ServerStatus& operator=(const Response_ServerStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response_ServerStatus& default_instance();

  void Swap(Response_ServerStatus* other);

  // implements Message ----------------------------------------------

  Response_ServerStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response_ServerStatus& from);
  void MergeFrom(const Response_ServerStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes msg = 1;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 1;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const void* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:floyd.client.Response.ServerStatus)
 private:
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eproto();
  friend void protobuf_AssignDesc_client_2eproto();
  friend void protobuf_ShutdownFile_client_2eproto();

  void InitAsDefaultInstance();
  static Response_ServerStatus* default_instance_;
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();

  void Swap(Response* other);

  // implements Message ----------------------------------------------

  Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Response_Write Write;
  typedef Response_Read Read;
  typedef Response_ServerStatus ServerStatus;

  // accessors -------------------------------------------------------

  // required .floyd.client.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::floyd::client::Type type() const;
  inline void set_type(::floyd::client::Type value);

  // optional .floyd.client.Response.Write write = 2;
  inline bool has_write() const;
  inline void clear_write();
  static const int kWriteFieldNumber = 2;
  inline const ::floyd::client::Response_Write& write() const;
  inline ::floyd::client::Response_Write* mutable_write();
  inline ::floyd::client::Response_Write* release_write();
  inline void set_allocated_write(::floyd::client::Response_Write* write);

  // optional .floyd.client.Response.Read read = 3;
  inline bool has_read() const;
  inline void clear_read();
  static const int kReadFieldNumber = 3;
  inline const ::floyd::client::Response_Read& read() const;
  inline ::floyd::client::Response_Read* mutable_read();
  inline ::floyd::client::Response_Read* release_read();
  inline void set_allocated_read(::floyd::client::Response_Read* read);

  // optional .floyd.client.Response.ServerStatus server_status = 4;
  inline bool has_server_status() const;
  inline void clear_server_status();
  static const int kServerStatusFieldNumber = 4;
  inline const ::floyd::client::Response_ServerStatus& server_status() const;
  inline ::floyd::client::Response_ServerStatus* mutable_server_status();
  inline ::floyd::client::Response_ServerStatus* release_server_status();
  inline void set_allocated_server_status(::floyd::client::Response_ServerStatus* server_status);

  // @@protoc_insertion_point(class_scope:floyd.client.Response)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_write();
  inline void clear_has_write();
  inline void set_has_read();
  inline void clear_has_read();
  inline void set_has_server_status();
  inline void clear_has_server_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::floyd::client::Response_Write* write_;
  ::floyd::client::Response_Read* read_;
  ::floyd::client::Response_ServerStatus* server_status_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eproto();
  friend void protobuf_AssignDesc_client_2eproto();
  friend void protobuf_ShutdownFile_client_2eproto();

  void InitAsDefaultInstance();
  static Response* default_instance_;
};
// ===================================================================


// ===================================================================

// Request_Write

// required bytes key = 1;
inline bool Request_Write::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Request_Write::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Request_Write::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Request_Write::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& Request_Write::key() const {
  return *key_;
}
inline void Request_Write::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void Request_Write::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void Request_Write::set_key(const void* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Request_Write::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* Request_Write::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Request_Write::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes value = 2;
inline bool Request_Write::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Request_Write::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Request_Write::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Request_Write::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& Request_Write::value() const {
  return *value_;
}
inline void Request_Write::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void Request_Write::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void Request_Write::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Request_Write::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* Request_Write::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Request_Write::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes uuid = 3;
inline bool Request_Write::has_uuid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Request_Write::set_has_uuid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Request_Write::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Request_Write::clear_uuid() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    uuid_->clear();
  }
  clear_has_uuid();
}
inline const ::std::string& Request_Write::uuid() const {
  return *uuid_;
}
inline void Request_Write::set_uuid(const ::std::string& value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void Request_Write::set_uuid(const char* value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void Request_Write::set_uuid(const void* value, size_t size) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Request_Write::mutable_uuid() {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  return uuid_;
}
inline ::std::string* Request_Write::release_uuid() {
  clear_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uuid_;
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Request_Write::set_allocated_uuid(::std::string* uuid) {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (uuid) {
    set_has_uuid();
    uuid_ = uuid;
  } else {
    clear_has_uuid();
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Request_Read

// required bytes key = 1;
inline bool Request_Read::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Request_Read::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Request_Read::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Request_Read::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& Request_Read::key() const {
  return *key_;
}
inline void Request_Read::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void Request_Read::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void Request_Read::set_key(const void* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Request_Read::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* Request_Read::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Request_Read::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Request

// required .floyd.client.Type type = 1;
inline bool Request::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Request::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Request::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Request::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::floyd::client::Type Request::type() const {
  return static_cast< ::floyd::client::Type >(type_);
}
inline void Request::set_type(::floyd::client::Type value) {
  assert(::floyd::client::Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .floyd.client.Request.Write write = 2;
inline bool Request::has_write() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Request::set_has_write() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Request::clear_has_write() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Request::clear_write() {
  if (write_ != NULL) write_->::floyd::client::Request_Write::Clear();
  clear_has_write();
}
inline const ::floyd::client::Request_Write& Request::write() const {
  return write_ != NULL ? *write_ : *default_instance_->write_;
}
inline ::floyd::client::Request_Write* Request::mutable_write() {
  set_has_write();
  if (write_ == NULL) write_ = new ::floyd::client::Request_Write;
  return write_;
}
inline ::floyd::client::Request_Write* Request::release_write() {
  clear_has_write();
  ::floyd::client::Request_Write* temp = write_;
  write_ = NULL;
  return temp;
}
inline void Request::set_allocated_write(::floyd::client::Request_Write* write) {
  delete write_;
  write_ = write;
  if (write) {
    set_has_write();
  } else {
    clear_has_write();
  }
}

// optional .floyd.client.Request.Read read = 3;
inline bool Request::has_read() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Request::set_has_read() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Request::clear_has_read() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Request::clear_read() {
  if (read_ != NULL) read_->::floyd::client::Request_Read::Clear();
  clear_has_read();
}
inline const ::floyd::client::Request_Read& Request::read() const {
  return read_ != NULL ? *read_ : *default_instance_->read_;
}
inline ::floyd::client::Request_Read* Request::mutable_read() {
  set_has_read();
  if (read_ == NULL) read_ = new ::floyd::client::Request_Read;
  return read_;
}
inline ::floyd::client::Request_Read* Request::release_read() {
  clear_has_read();
  ::floyd::client::Request_Read* temp = read_;
  read_ = NULL;
  return temp;
}
inline void Request::set_allocated_read(::floyd::client::Request_Read* read) {
  delete read_;
  read_ = read;
  if (read) {
    set_has_read();
  } else {
    clear_has_read();
  }
}

// -------------------------------------------------------------------

// Response_Write

// required int32 status = 1;
inline bool Response_Write::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Response_Write::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Response_Write::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Response_Write::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 Response_Write::status() const {
  return status_;
}
inline void Response_Write::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// optional bytes msg = 2;
inline bool Response_Write::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Response_Write::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Response_Write::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Response_Write::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& Response_Write::msg() const {
  return *msg_;
}
inline void Response_Write::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void Response_Write::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void Response_Write::set_msg(const void* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Response_Write::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* Response_Write::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Response_Write::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Response_Read

// required int32 status = 1;
inline bool Response_Read::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Response_Read::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Response_Read::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Response_Read::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 Response_Read::status() const {
  return status_;
}
inline void Response_Read::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// optional bytes value = 2;
inline bool Response_Read::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Response_Read::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Response_Read::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Response_Read::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& Response_Read::value() const {
  return *value_;
}
inline void Response_Read::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void Response_Read::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void Response_Read::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Response_Read::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* Response_Read::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Response_Read::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Response_ServerStatus

// required bytes msg = 1;
inline bool Response_ServerStatus::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Response_ServerStatus::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Response_ServerStatus::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Response_ServerStatus::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& Response_ServerStatus::msg() const {
  return *msg_;
}
inline void Response_ServerStatus::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void Response_ServerStatus::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void Response_ServerStatus::set_msg(const void* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Response_ServerStatus::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* Response_ServerStatus::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Response_ServerStatus::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Response

// required .floyd.client.Type type = 1;
inline bool Response::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Response::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Response::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Response::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::floyd::client::Type Response::type() const {
  return static_cast< ::floyd::client::Type >(type_);
}
inline void Response::set_type(::floyd::client::Type value) {
  assert(::floyd::client::Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .floyd.client.Response.Write write = 2;
inline bool Response::has_write() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Response::set_has_write() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Response::clear_has_write() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Response::clear_write() {
  if (write_ != NULL) write_->::floyd::client::Response_Write::Clear();
  clear_has_write();
}
inline const ::floyd::client::Response_Write& Response::write() const {
  return write_ != NULL ? *write_ : *default_instance_->write_;
}
inline ::floyd::client::Response_Write* Response::mutable_write() {
  set_has_write();
  if (write_ == NULL) write_ = new ::floyd::client::Response_Write;
  return write_;
}
inline ::floyd::client::Response_Write* Response::release_write() {
  clear_has_write();
  ::floyd::client::Response_Write* temp = write_;
  write_ = NULL;
  return temp;
}
inline void Response::set_allocated_write(::floyd::client::Response_Write* write) {
  delete write_;
  write_ = write;
  if (write) {
    set_has_write();
  } else {
    clear_has_write();
  }
}

// optional .floyd.client.Response.Read read = 3;
inline bool Response::has_read() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Response::set_has_read() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Response::clear_has_read() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Response::clear_read() {
  if (read_ != NULL) read_->::floyd::client::Response_Read::Clear();
  clear_has_read();
}
inline const ::floyd::client::Response_Read& Response::read() const {
  return read_ != NULL ? *read_ : *default_instance_->read_;
}
inline ::floyd::client::Response_Read* Response::mutable_read() {
  set_has_read();
  if (read_ == NULL) read_ = new ::floyd::client::Response_Read;
  return read_;
}
inline ::floyd::client::Response_Read* Response::release_read() {
  clear_has_read();
  ::floyd::client::Response_Read* temp = read_;
  read_ = NULL;
  return temp;
}
inline void Response::set_allocated_read(::floyd::client::Response_Read* read) {
  delete read_;
  read_ = read;
  if (read) {
    set_has_read();
  } else {
    clear_has_read();
  }
}

// optional .floyd.client.Response.ServerStatus server_status = 4;
inline bool Response::has_server_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Response::set_has_server_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Response::clear_has_server_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Response::clear_server_status() {
  if (server_status_ != NULL) server_status_->::floyd::client::Response_ServerStatus::Clear();
  clear_has_server_status();
}
inline const ::floyd::client::Response_ServerStatus& Response::server_status() const {
  return server_status_ != NULL ? *server_status_ : *default_instance_->server_status_;
}
inline ::floyd::client::Response_ServerStatus* Response::mutable_server_status() {
  set_has_server_status();
  if (server_status_ == NULL) server_status_ = new ::floyd::client::Response_ServerStatus;
  return server_status_;
}
inline ::floyd::client::Response_ServerStatus* Response::release_server_status() {
  clear_has_server_status();
  ::floyd::client::Response_ServerStatus* temp = server_status_;
  server_status_ = NULL;
  return temp;
}
inline void Response::set_allocated_server_status(::floyd::client::Response_ServerStatus* server_status) {
  delete server_status_;
  server_status_ = server_status;
  if (server_status) {
    set_has_server_status();
  } else {
    clear_has_server_status();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client
}  // namespace floyd

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::floyd::client::Type>() {
  return ::floyd::client::Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_client_2eproto__INCLUDED
