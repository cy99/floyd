// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: command.proto

#ifndef PROTOBUF_command_2eproto__INCLUDED
#define PROTOBUF_command_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "raft/raft.pb.h"
// @@protoc_insertion_point(includes)

namespace command {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_command_2eproto();
void protobuf_AssignDesc_command_2eproto();
void protobuf_ShutdownFile_command_2eproto();

class Command;
class Command_Kv;
class Command_RaftStage;
class Command_User;
class CommandRes;
class CommandRes_Kv;
class CommandRes_KvRet;
class CommandRes_KvAllRet;
class CommandRes_RaftStageRes;

enum Command_Type {
  Command_Type_Read = 0,
  Command_Type_ReadAll = 1,
  Command_Type_DirtyWrite = 2,
  Command_Type_Write = 3,
  Command_Type_TryLock = 4,
  Command_Type_UnLock = 5,
  Command_Type_DeleteUser = 6,
  Command_Type_RaftVote = 7,
  Command_Type_RaftAppendEntries = 8,
  Command_Type_SynRaftStage = 9,
  Command_Type_Delete = 10
};
bool Command_Type_IsValid(int value);
const Command_Type Command_Type_Type_MIN = Command_Type_Read;
const Command_Type Command_Type_Type_MAX = Command_Type_Delete;
const int Command_Type_Type_ARRAYSIZE = Command_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Command_Type_descriptor();
inline const ::std::string& Command_Type_Name(Command_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Command_Type_descriptor(), value);
}
inline bool Command_Type_Parse(
    const ::std::string& name, Command_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Command_Type>(
    Command_Type_descriptor(), name, value);
}
enum CommandRes_Type {
  CommandRes_Type_Read = 0,
  CommandRes_Type_ReadAll = 1,
  CommandRes_Type_Write = 2,
  CommandRes_Type_TryLock = 3,
  CommandRes_Type_UnLock = 4,
  CommandRes_Type_DeleteUser = 5,
  CommandRes_Type_RaftVote = 6,
  CommandRes_Type_RaftAppendEntries = 7,
  CommandRes_Type_SynRaftStage = 8,
  CommandRes_Type_Delete = 9
};
bool CommandRes_Type_IsValid(int value);
const CommandRes_Type CommandRes_Type_Type_MIN = CommandRes_Type_Read;
const CommandRes_Type CommandRes_Type_Type_MAX = CommandRes_Type_Delete;
const int CommandRes_Type_Type_ARRAYSIZE = CommandRes_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* CommandRes_Type_descriptor();
inline const ::std::string& CommandRes_Type_Name(CommandRes_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    CommandRes_Type_descriptor(), value);
}
inline bool CommandRes_Type_Parse(
    const ::std::string& name, CommandRes_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CommandRes_Type>(
    CommandRes_Type_descriptor(), name, value);
}
// ===================================================================

class Command_Kv : public ::google::protobuf::Message {
 public:
  Command_Kv();
  virtual ~Command_Kv();

  Command_Kv(const Command_Kv& from);

  inline Command_Kv& operator=(const Command_Kv& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Command_Kv& default_instance();

  void Swap(Command_Kv* other);

  // implements Message ----------------------------------------------

  Command_Kv* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Command_Kv& from);
  void MergeFrom(const Command_Kv& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const void* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // optional bytes value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:command.Command.Kv)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* key_;
  ::std::string* value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_command_2eproto();
  friend void protobuf_AssignDesc_command_2eproto();
  friend void protobuf_ShutdownFile_command_2eproto();

  void InitAsDefaultInstance();
  static Command_Kv* default_instance_;
};
// -------------------------------------------------------------------

class Command_RaftStage : public ::google::protobuf::Message {
 public:
  Command_RaftStage();
  virtual ~Command_RaftStage();

  Command_RaftStage(const Command_RaftStage& from);

  inline Command_RaftStage& operator=(const Command_RaftStage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Command_RaftStage& default_instance();

  void Swap(Command_RaftStage* other);

  // implements Message ----------------------------------------------

  Command_RaftStage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Command_RaftStage& from);
  void MergeFrom(const Command_RaftStage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 term = 1;
  inline bool has_term() const;
  inline void clear_term();
  static const int kTermFieldNumber = 1;
  inline ::google::protobuf::int64 term() const;
  inline void set_term(::google::protobuf::int64 value);

  // required int64 commit_index = 2;
  inline bool has_commit_index() const;
  inline void clear_commit_index();
  static const int kCommitIndexFieldNumber = 2;
  inline ::google::protobuf::int64 commit_index() const;
  inline void set_commit_index(::google::protobuf::int64 value);

  // optional bytes ip = 3;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 3;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const void* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional int32 port = 4;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 4;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:command.Command.RaftStage)
 private:
  inline void set_has_term();
  inline void clear_has_term();
  inline void set_has_commit_index();
  inline void clear_has_commit_index();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 term_;
  ::google::protobuf::int64 commit_index_;
  ::std::string* ip_;
  ::google::protobuf::int32 port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_command_2eproto();
  friend void protobuf_AssignDesc_command_2eproto();
  friend void protobuf_ShutdownFile_command_2eproto();

  void InitAsDefaultInstance();
  static Command_RaftStage* default_instance_;
};
// -------------------------------------------------------------------

class Command_User : public ::google::protobuf::Message {
 public:
  Command_User();
  virtual ~Command_User();

  Command_User(const Command_User& from);

  inline Command_User& operator=(const Command_User& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Command_User& default_instance();

  void Swap(Command_User* other);

  // implements Message ----------------------------------------------

  Command_User* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Command_User& from);
  void MergeFrom(const Command_User& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes ip = 1;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 1;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const void* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // required int32 port = 2;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:command.Command.User)
 private:
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* ip_;
  ::google::protobuf::int32 port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_command_2eproto();
  friend void protobuf_AssignDesc_command_2eproto();
  friend void protobuf_ShutdownFile_command_2eproto();

  void InitAsDefaultInstance();
  static Command_User* default_instance_;
};
// -------------------------------------------------------------------

class Command : public ::google::protobuf::Message {
 public:
  Command();
  virtual ~Command();

  Command(const Command& from);

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Command& default_instance();

  void Swap(Command* other);

  // implements Message ----------------------------------------------

  Command* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Command& from);
  void MergeFrom(const Command& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Command_Kv Kv;
  typedef Command_RaftStage RaftStage;
  typedef Command_User User;

  typedef Command_Type Type;
  static const Type Read = Command_Type_Read;
  static const Type ReadAll = Command_Type_ReadAll;
  static const Type DirtyWrite = Command_Type_DirtyWrite;
  static const Type Write = Command_Type_Write;
  static const Type TryLock = Command_Type_TryLock;
  static const Type UnLock = Command_Type_UnLock;
  static const Type DeleteUser = Command_Type_DeleteUser;
  static const Type RaftVote = Command_Type_RaftVote;
  static const Type RaftAppendEntries = Command_Type_RaftAppendEntries;
  static const Type SynRaftStage = Command_Type_SynRaftStage;
  static const Type Delete = Command_Type_Delete;
  static inline bool Type_IsValid(int value) {
    return Command_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Command_Type_Type_MIN;
  static const Type Type_MAX =
    Command_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Command_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Command_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Command_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Command_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .command.Command.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::command::Command_Type type() const;
  inline void set_type(::command::Command_Type value);

  // optional .command.Command.Kv kv = 2;
  inline bool has_kv() const;
  inline void clear_kv();
  static const int kKvFieldNumber = 2;
  inline const ::command::Command_Kv& kv() const;
  inline ::command::Command_Kv* mutable_kv();
  inline ::command::Command_Kv* release_kv();
  inline void set_allocated_kv(::command::Command_Kv* kv);

  // optional .floyd.raft.RequestVote rqv = 3;
  inline bool has_rqv() const;
  inline void clear_rqv();
  static const int kRqvFieldNumber = 3;
  inline const ::floyd::raft::RequestVote& rqv() const;
  inline ::floyd::raft::RequestVote* mutable_rqv();
  inline ::floyd::raft::RequestVote* release_rqv();
  inline void set_allocated_rqv(::floyd::raft::RequestVote* rqv);

  // optional .floyd.raft.AppendEntriesRequest aerq = 4;
  inline bool has_aerq() const;
  inline void clear_aerq();
  static const int kAerqFieldNumber = 4;
  inline const ::floyd::raft::AppendEntriesRequest& aerq() const;
  inline ::floyd::raft::AppendEntriesRequest* mutable_aerq();
  inline ::floyd::raft::AppendEntriesRequest* release_aerq();
  inline void set_allocated_aerq(::floyd::raft::AppendEntriesRequest* aerq);

  // optional .command.Command.User user = 5;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 5;
  inline const ::command::Command_User& user() const;
  inline ::command::Command_User* mutable_user();
  inline ::command::Command_User* release_user();
  inline void set_allocated_user(::command::Command_User* user);

  // optional .command.Command.RaftStage raftstage = 6;
  inline bool has_raftstage() const;
  inline void clear_raftstage();
  static const int kRaftstageFieldNumber = 6;
  inline const ::command::Command_RaftStage& raftstage() const;
  inline ::command::Command_RaftStage* mutable_raftstage();
  inline ::command::Command_RaftStage* release_raftstage();
  inline void set_allocated_raftstage(::command::Command_RaftStage* raftstage);

  // @@protoc_insertion_point(class_scope:command.Command)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_kv();
  inline void clear_has_kv();
  inline void set_has_rqv();
  inline void clear_has_rqv();
  inline void set_has_aerq();
  inline void clear_has_aerq();
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_raftstage();
  inline void clear_has_raftstage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::command::Command_Kv* kv_;
  ::floyd::raft::RequestVote* rqv_;
  ::floyd::raft::AppendEntriesRequest* aerq_;
  ::command::Command_User* user_;
  ::command::Command_RaftStage* raftstage_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_command_2eproto();
  friend void protobuf_AssignDesc_command_2eproto();
  friend void protobuf_ShutdownFile_command_2eproto();

  void InitAsDefaultInstance();
  static Command* default_instance_;
};
// -------------------------------------------------------------------

class CommandRes_Kv : public ::google::protobuf::Message {
 public:
  CommandRes_Kv();
  virtual ~CommandRes_Kv();

  CommandRes_Kv(const CommandRes_Kv& from);

  inline CommandRes_Kv& operator=(const CommandRes_Kv& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommandRes_Kv& default_instance();

  void Swap(CommandRes_Kv* other);

  // implements Message ----------------------------------------------

  CommandRes_Kv* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommandRes_Kv& from);
  void MergeFrom(const CommandRes_Kv& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const void* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required bytes value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:command.CommandRes.Kv)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* key_;
  ::std::string* value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_command_2eproto();
  friend void protobuf_AssignDesc_command_2eproto();
  friend void protobuf_ShutdownFile_command_2eproto();

  void InitAsDefaultInstance();
  static CommandRes_Kv* default_instance_;
};
// -------------------------------------------------------------------

class CommandRes_KvRet : public ::google::protobuf::Message {
 public:
  CommandRes_KvRet();
  virtual ~CommandRes_KvRet();

  CommandRes_KvRet(const CommandRes_KvRet& from);

  inline CommandRes_KvRet& operator=(const CommandRes_KvRet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommandRes_KvRet& default_instance();

  void Swap(CommandRes_KvRet* other);

  // implements Message ----------------------------------------------

  CommandRes_KvRet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommandRes_KvRet& from);
  void MergeFrom(const CommandRes_KvRet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline bool status() const;
  inline void set_status(bool value);

  // optional bytes value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:command.CommandRes.KvRet)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* value_;
  bool status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_command_2eproto();
  friend void protobuf_AssignDesc_command_2eproto();
  friend void protobuf_ShutdownFile_command_2eproto();

  void InitAsDefaultInstance();
  static CommandRes_KvRet* default_instance_;
};
// -------------------------------------------------------------------

class CommandRes_KvAllRet : public ::google::protobuf::Message {
 public:
  CommandRes_KvAllRet();
  virtual ~CommandRes_KvAllRet();

  CommandRes_KvAllRet(const CommandRes_KvAllRet& from);

  inline CommandRes_KvAllRet& operator=(const CommandRes_KvAllRet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommandRes_KvAllRet& default_instance();

  void Swap(CommandRes_KvAllRet* other);

  // implements Message ----------------------------------------------

  CommandRes_KvAllRet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommandRes_KvAllRet& from);
  void MergeFrom(const CommandRes_KvAllRet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline bool status() const;
  inline void set_status(bool value);

  // repeated .command.CommandRes.Kv kvall = 2;
  inline int kvall_size() const;
  inline void clear_kvall();
  static const int kKvallFieldNumber = 2;
  inline const ::command::CommandRes_Kv& kvall(int index) const;
  inline ::command::CommandRes_Kv* mutable_kvall(int index);
  inline ::command::CommandRes_Kv* add_kvall();
  inline const ::google::protobuf::RepeatedPtrField< ::command::CommandRes_Kv >&
      kvall() const;
  inline ::google::protobuf::RepeatedPtrField< ::command::CommandRes_Kv >*
      mutable_kvall();

  // @@protoc_insertion_point(class_scope:command.CommandRes.KvAllRet)
 private:
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::command::CommandRes_Kv > kvall_;
  bool status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_command_2eproto();
  friend void protobuf_AssignDesc_command_2eproto();
  friend void protobuf_ShutdownFile_command_2eproto();

  void InitAsDefaultInstance();
  static CommandRes_KvAllRet* default_instance_;
};
// -------------------------------------------------------------------

class CommandRes_RaftStageRes : public ::google::protobuf::Message {
 public:
  CommandRes_RaftStageRes();
  virtual ~CommandRes_RaftStageRes();

  CommandRes_RaftStageRes(const CommandRes_RaftStageRes& from);

  inline CommandRes_RaftStageRes& operator=(const CommandRes_RaftStageRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommandRes_RaftStageRes& default_instance();

  void Swap(CommandRes_RaftStageRes* other);

  // implements Message ----------------------------------------------

  CommandRes_RaftStageRes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommandRes_RaftStageRes& from);
  void MergeFrom(const CommandRes_RaftStageRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 term = 1;
  inline bool has_term() const;
  inline void clear_term();
  static const int kTermFieldNumber = 1;
  inline ::google::protobuf::uint64 term() const;
  inline void set_term(::google::protobuf::uint64 value);

  // required uint64 commit_index = 2;
  inline bool has_commit_index() const;
  inline void clear_commit_index();
  static const int kCommitIndexFieldNumber = 2;
  inline ::google::protobuf::uint64 commit_index() const;
  inline void set_commit_index(::google::protobuf::uint64 value);

  // required bytes role = 3;
  inline bool has_role() const;
  inline void clear_role();
  static const int kRoleFieldNumber = 3;
  inline const ::std::string& role() const;
  inline void set_role(const ::std::string& value);
  inline void set_role(const char* value);
  inline void set_role(const void* value, size_t size);
  inline ::std::string* mutable_role();
  inline ::std::string* release_role();
  inline void set_allocated_role(::std::string* role);

  // required bytes leader_ip = 4;
  inline bool has_leader_ip() const;
  inline void clear_leader_ip();
  static const int kLeaderIpFieldNumber = 4;
  inline const ::std::string& leader_ip() const;
  inline void set_leader_ip(const ::std::string& value);
  inline void set_leader_ip(const char* value);
  inline void set_leader_ip(const void* value, size_t size);
  inline ::std::string* mutable_leader_ip();
  inline ::std::string* release_leader_ip();
  inline void set_allocated_leader_ip(::std::string* leader_ip);

  // required int32 leader_port = 5;
  inline bool has_leader_port() const;
  inline void clear_leader_port();
  static const int kLeaderPortFieldNumber = 5;
  inline ::google::protobuf::int32 leader_port() const;
  inline void set_leader_port(::google::protobuf::int32 value);

  // required bytes voted_for_ip = 6;
  inline bool has_voted_for_ip() const;
  inline void clear_voted_for_ip();
  static const int kVotedForIpFieldNumber = 6;
  inline const ::std::string& voted_for_ip() const;
  inline void set_voted_for_ip(const ::std::string& value);
  inline void set_voted_for_ip(const char* value);
  inline void set_voted_for_ip(const void* value, size_t size);
  inline ::std::string* mutable_voted_for_ip();
  inline ::std::string* release_voted_for_ip();
  inline void set_allocated_voted_for_ip(::std::string* voted_for_ip);

  // required int32 voted_for_port = 7;
  inline bool has_voted_for_port() const;
  inline void clear_voted_for_port();
  static const int kVotedForPortFieldNumber = 7;
  inline ::google::protobuf::int32 voted_for_port() const;
  inline void set_voted_for_port(::google::protobuf::int32 value);

  // required uint64 last_log_term = 8;
  inline bool has_last_log_term() const;
  inline void clear_last_log_term();
  static const int kLastLogTermFieldNumber = 8;
  inline ::google::protobuf::uint64 last_log_term() const;
  inline void set_last_log_term(::google::protobuf::uint64 value);

  // required uint64 last_log_index = 9;
  inline bool has_last_log_index() const;
  inline void clear_last_log_index();
  static const int kLastLogIndexFieldNumber = 9;
  inline ::google::protobuf::uint64 last_log_index() const;
  inline void set_last_log_index(::google::protobuf::uint64 value);

  // required uint64 last_apply_index = 10;
  inline bool has_last_apply_index() const;
  inline void clear_last_apply_index();
  static const int kLastApplyIndexFieldNumber = 10;
  inline ::google::protobuf::uint64 last_apply_index() const;
  inline void set_last_apply_index(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:command.CommandRes.RaftStageRes)
 private:
  inline void set_has_term();
  inline void clear_has_term();
  inline void set_has_commit_index();
  inline void clear_has_commit_index();
  inline void set_has_role();
  inline void clear_has_role();
  inline void set_has_leader_ip();
  inline void clear_has_leader_ip();
  inline void set_has_leader_port();
  inline void clear_has_leader_port();
  inline void set_has_voted_for_ip();
  inline void clear_has_voted_for_ip();
  inline void set_has_voted_for_port();
  inline void clear_has_voted_for_port();
  inline void set_has_last_log_term();
  inline void clear_has_last_log_term();
  inline void set_has_last_log_index();
  inline void clear_has_last_log_index();
  inline void set_has_last_apply_index();
  inline void clear_has_last_apply_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 term_;
  ::google::protobuf::uint64 commit_index_;
  ::std::string* role_;
  ::std::string* leader_ip_;
  ::std::string* voted_for_ip_;
  ::google::protobuf::int32 leader_port_;
  ::google::protobuf::int32 voted_for_port_;
  ::google::protobuf::uint64 last_log_term_;
  ::google::protobuf::uint64 last_log_index_;
  ::google::protobuf::uint64 last_apply_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_command_2eproto();
  friend void protobuf_AssignDesc_command_2eproto();
  friend void protobuf_ShutdownFile_command_2eproto();

  void InitAsDefaultInstance();
  static CommandRes_RaftStageRes* default_instance_;
};
// -------------------------------------------------------------------

class CommandRes : public ::google::protobuf::Message {
 public:
  CommandRes();
  virtual ~CommandRes();

  CommandRes(const CommandRes& from);

  inline CommandRes& operator=(const CommandRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommandRes& default_instance();

  void Swap(CommandRes* other);

  // implements Message ----------------------------------------------

  CommandRes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommandRes& from);
  void MergeFrom(const CommandRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CommandRes_Kv Kv;
  typedef CommandRes_KvRet KvRet;
  typedef CommandRes_KvAllRet KvAllRet;
  typedef CommandRes_RaftStageRes RaftStageRes;

  typedef CommandRes_Type Type;
  static const Type Read = CommandRes_Type_Read;
  static const Type ReadAll = CommandRes_Type_ReadAll;
  static const Type Write = CommandRes_Type_Write;
  static const Type TryLock = CommandRes_Type_TryLock;
  static const Type UnLock = CommandRes_Type_UnLock;
  static const Type DeleteUser = CommandRes_Type_DeleteUser;
  static const Type RaftVote = CommandRes_Type_RaftVote;
  static const Type RaftAppendEntries = CommandRes_Type_RaftAppendEntries;
  static const Type SynRaftStage = CommandRes_Type_SynRaftStage;
  static const Type Delete = CommandRes_Type_Delete;
  static inline bool Type_IsValid(int value) {
    return CommandRes_Type_IsValid(value);
  }
  static const Type Type_MIN =
    CommandRes_Type_Type_MIN;
  static const Type Type_MAX =
    CommandRes_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    CommandRes_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return CommandRes_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return CommandRes_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return CommandRes_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .command.CommandRes.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::command::CommandRes_Type type() const;
  inline void set_type(::command::CommandRes_Type value);

  // optional .command.CommandRes.KvRet kvr = 2;
  inline bool has_kvr() const;
  inline void clear_kvr();
  static const int kKvrFieldNumber = 2;
  inline const ::command::CommandRes_KvRet& kvr() const;
  inline ::command::CommandRes_KvRet* mutable_kvr();
  inline ::command::CommandRes_KvRet* release_kvr();
  inline void set_allocated_kvr(::command::CommandRes_KvRet* kvr);

  // optional .command.CommandRes.KvAllRet kvallr = 3;
  inline bool has_kvallr() const;
  inline void clear_kvallr();
  static const int kKvallrFieldNumber = 3;
  inline const ::command::CommandRes_KvAllRet& kvallr() const;
  inline ::command::CommandRes_KvAllRet* mutable_kvallr();
  inline ::command::CommandRes_KvAllRet* release_kvallr();
  inline void set_allocated_kvallr(::command::CommandRes_KvAllRet* kvallr);

  // optional .floyd.raft.ResponseVote rsv = 4;
  inline bool has_rsv() const;
  inline void clear_rsv();
  static const int kRsvFieldNumber = 4;
  inline const ::floyd::raft::ResponseVote& rsv() const;
  inline ::floyd::raft::ResponseVote* mutable_rsv();
  inline ::floyd::raft::ResponseVote* release_rsv();
  inline void set_allocated_rsv(::floyd::raft::ResponseVote* rsv);

  // optional .floyd.raft.AppendEntriesResponse aers = 5;
  inline bool has_aers() const;
  inline void clear_aers();
  static const int kAersFieldNumber = 5;
  inline const ::floyd::raft::AppendEntriesResponse& aers() const;
  inline ::floyd::raft::AppendEntriesResponse* mutable_aers();
  inline ::floyd::raft::AppendEntriesResponse* release_aers();
  inline void set_allocated_aers(::floyd::raft::AppendEntriesResponse* aers);

  // optional .command.CommandRes.RaftStageRes raftstage = 6;
  inline bool has_raftstage() const;
  inline void clear_raftstage();
  static const int kRaftstageFieldNumber = 6;
  inline const ::command::CommandRes_RaftStageRes& raftstage() const;
  inline ::command::CommandRes_RaftStageRes* mutable_raftstage();
  inline ::command::CommandRes_RaftStageRes* release_raftstage();
  inline void set_allocated_raftstage(::command::CommandRes_RaftStageRes* raftstage);

  // @@protoc_insertion_point(class_scope:command.CommandRes)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_kvr();
  inline void clear_has_kvr();
  inline void set_has_kvallr();
  inline void clear_has_kvallr();
  inline void set_has_rsv();
  inline void clear_has_rsv();
  inline void set_has_aers();
  inline void clear_has_aers();
  inline void set_has_raftstage();
  inline void clear_has_raftstage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::command::CommandRes_KvRet* kvr_;
  ::command::CommandRes_KvAllRet* kvallr_;
  ::floyd::raft::ResponseVote* rsv_;
  ::floyd::raft::AppendEntriesResponse* aers_;
  ::command::CommandRes_RaftStageRes* raftstage_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_command_2eproto();
  friend void protobuf_AssignDesc_command_2eproto();
  friend void protobuf_ShutdownFile_command_2eproto();

  void InitAsDefaultInstance();
  static CommandRes* default_instance_;
};
// ===================================================================


// ===================================================================

// Command_Kv

// required bytes key = 1;
inline bool Command_Kv::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Command_Kv::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Command_Kv::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Command_Kv::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& Command_Kv::key() const {
  return *key_;
}
inline void Command_Kv::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void Command_Kv::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void Command_Kv::set_key(const void* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Command_Kv::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* Command_Kv::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Command_Kv::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes value = 2;
inline bool Command_Kv::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Command_Kv::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Command_Kv::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Command_Kv::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& Command_Kv::value() const {
  return *value_;
}
inline void Command_Kv::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void Command_Kv::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void Command_Kv::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Command_Kv::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* Command_Kv::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Command_Kv::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Command_RaftStage

// required int64 term = 1;
inline bool Command_RaftStage::has_term() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Command_RaftStage::set_has_term() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Command_RaftStage::clear_has_term() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Command_RaftStage::clear_term() {
  term_ = GOOGLE_LONGLONG(0);
  clear_has_term();
}
inline ::google::protobuf::int64 Command_RaftStage::term() const {
  return term_;
}
inline void Command_RaftStage::set_term(::google::protobuf::int64 value) {
  set_has_term();
  term_ = value;
}

// required int64 commit_index = 2;
inline bool Command_RaftStage::has_commit_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Command_RaftStage::set_has_commit_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Command_RaftStage::clear_has_commit_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Command_RaftStage::clear_commit_index() {
  commit_index_ = GOOGLE_LONGLONG(0);
  clear_has_commit_index();
}
inline ::google::protobuf::int64 Command_RaftStage::commit_index() const {
  return commit_index_;
}
inline void Command_RaftStage::set_commit_index(::google::protobuf::int64 value) {
  set_has_commit_index();
  commit_index_ = value;
}

// optional bytes ip = 3;
inline bool Command_RaftStage::has_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Command_RaftStage::set_has_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Command_RaftStage::clear_has_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Command_RaftStage::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& Command_RaftStage::ip() const {
  return *ip_;
}
inline void Command_RaftStage::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void Command_RaftStage::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void Command_RaftStage::set_ip(const void* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Command_RaftStage::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* Command_RaftStage::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Command_RaftStage::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 port = 4;
inline bool Command_RaftStage::has_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Command_RaftStage::set_has_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Command_RaftStage::clear_has_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Command_RaftStage::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 Command_RaftStage::port() const {
  return port_;
}
inline void Command_RaftStage::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// -------------------------------------------------------------------

// Command_User

// required bytes ip = 1;
inline bool Command_User::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Command_User::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Command_User::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Command_User::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& Command_User::ip() const {
  return *ip_;
}
inline void Command_User::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void Command_User::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void Command_User::set_ip(const void* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Command_User::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* Command_User::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Command_User::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 port = 2;
inline bool Command_User::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Command_User::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Command_User::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Command_User::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 Command_User::port() const {
  return port_;
}
inline void Command_User::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// -------------------------------------------------------------------

// Command

// required .command.Command.Type type = 1;
inline bool Command::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Command::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Command::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Command::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::command::Command_Type Command::type() const {
  return static_cast< ::command::Command_Type >(type_);
}
inline void Command::set_type(::command::Command_Type value) {
  assert(::command::Command_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .command.Command.Kv kv = 2;
inline bool Command::has_kv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Command::set_has_kv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Command::clear_has_kv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Command::clear_kv() {
  if (kv_ != NULL) kv_->::command::Command_Kv::Clear();
  clear_has_kv();
}
inline const ::command::Command_Kv& Command::kv() const {
  return kv_ != NULL ? *kv_ : *default_instance_->kv_;
}
inline ::command::Command_Kv* Command::mutable_kv() {
  set_has_kv();
  if (kv_ == NULL) kv_ = new ::command::Command_Kv;
  return kv_;
}
inline ::command::Command_Kv* Command::release_kv() {
  clear_has_kv();
  ::command::Command_Kv* temp = kv_;
  kv_ = NULL;
  return temp;
}
inline void Command::set_allocated_kv(::command::Command_Kv* kv) {
  delete kv_;
  kv_ = kv;
  if (kv) {
    set_has_kv();
  } else {
    clear_has_kv();
  }
}

// optional .floyd.raft.RequestVote rqv = 3;
inline bool Command::has_rqv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Command::set_has_rqv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Command::clear_has_rqv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Command::clear_rqv() {
  if (rqv_ != NULL) rqv_->::floyd::raft::RequestVote::Clear();
  clear_has_rqv();
}
inline const ::floyd::raft::RequestVote& Command::rqv() const {
  return rqv_ != NULL ? *rqv_ : *default_instance_->rqv_;
}
inline ::floyd::raft::RequestVote* Command::mutable_rqv() {
  set_has_rqv();
  if (rqv_ == NULL) rqv_ = new ::floyd::raft::RequestVote;
  return rqv_;
}
inline ::floyd::raft::RequestVote* Command::release_rqv() {
  clear_has_rqv();
  ::floyd::raft::RequestVote* temp = rqv_;
  rqv_ = NULL;
  return temp;
}
inline void Command::set_allocated_rqv(::floyd::raft::RequestVote* rqv) {
  delete rqv_;
  rqv_ = rqv;
  if (rqv) {
    set_has_rqv();
  } else {
    clear_has_rqv();
  }
}

// optional .floyd.raft.AppendEntriesRequest aerq = 4;
inline bool Command::has_aerq() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Command::set_has_aerq() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Command::clear_has_aerq() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Command::clear_aerq() {
  if (aerq_ != NULL) aerq_->::floyd::raft::AppendEntriesRequest::Clear();
  clear_has_aerq();
}
inline const ::floyd::raft::AppendEntriesRequest& Command::aerq() const {
  return aerq_ != NULL ? *aerq_ : *default_instance_->aerq_;
}
inline ::floyd::raft::AppendEntriesRequest* Command::mutable_aerq() {
  set_has_aerq();
  if (aerq_ == NULL) aerq_ = new ::floyd::raft::AppendEntriesRequest;
  return aerq_;
}
inline ::floyd::raft::AppendEntriesRequest* Command::release_aerq() {
  clear_has_aerq();
  ::floyd::raft::AppendEntriesRequest* temp = aerq_;
  aerq_ = NULL;
  return temp;
}
inline void Command::set_allocated_aerq(::floyd::raft::AppendEntriesRequest* aerq) {
  delete aerq_;
  aerq_ = aerq;
  if (aerq) {
    set_has_aerq();
  } else {
    clear_has_aerq();
  }
}

// optional .command.Command.User user = 5;
inline bool Command::has_user() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Command::set_has_user() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Command::clear_has_user() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Command::clear_user() {
  if (user_ != NULL) user_->::command::Command_User::Clear();
  clear_has_user();
}
inline const ::command::Command_User& Command::user() const {
  return user_ != NULL ? *user_ : *default_instance_->user_;
}
inline ::command::Command_User* Command::mutable_user() {
  set_has_user();
  if (user_ == NULL) user_ = new ::command::Command_User;
  return user_;
}
inline ::command::Command_User* Command::release_user() {
  clear_has_user();
  ::command::Command_User* temp = user_;
  user_ = NULL;
  return temp;
}
inline void Command::set_allocated_user(::command::Command_User* user) {
  delete user_;
  user_ = user;
  if (user) {
    set_has_user();
  } else {
    clear_has_user();
  }
}

// optional .command.Command.RaftStage raftstage = 6;
inline bool Command::has_raftstage() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Command::set_has_raftstage() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Command::clear_has_raftstage() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Command::clear_raftstage() {
  if (raftstage_ != NULL) raftstage_->::command::Command_RaftStage::Clear();
  clear_has_raftstage();
}
inline const ::command::Command_RaftStage& Command::raftstage() const {
  return raftstage_ != NULL ? *raftstage_ : *default_instance_->raftstage_;
}
inline ::command::Command_RaftStage* Command::mutable_raftstage() {
  set_has_raftstage();
  if (raftstage_ == NULL) raftstage_ = new ::command::Command_RaftStage;
  return raftstage_;
}
inline ::command::Command_RaftStage* Command::release_raftstage() {
  clear_has_raftstage();
  ::command::Command_RaftStage* temp = raftstage_;
  raftstage_ = NULL;
  return temp;
}
inline void Command::set_allocated_raftstage(::command::Command_RaftStage* raftstage) {
  delete raftstage_;
  raftstage_ = raftstage;
  if (raftstage) {
    set_has_raftstage();
  } else {
    clear_has_raftstage();
  }
}

// -------------------------------------------------------------------

// CommandRes_Kv

// required bytes key = 1;
inline bool CommandRes_Kv::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommandRes_Kv::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommandRes_Kv::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommandRes_Kv::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& CommandRes_Kv::key() const {
  return *key_;
}
inline void CommandRes_Kv::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void CommandRes_Kv::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void CommandRes_Kv::set_key(const void* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CommandRes_Kv::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* CommandRes_Kv::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CommandRes_Kv::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes value = 2;
inline bool CommandRes_Kv::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommandRes_Kv::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CommandRes_Kv::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CommandRes_Kv::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& CommandRes_Kv::value() const {
  return *value_;
}
inline void CommandRes_Kv::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void CommandRes_Kv::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void CommandRes_Kv::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CommandRes_Kv::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* CommandRes_Kv::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CommandRes_Kv::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CommandRes_KvRet

// required bool status = 1;
inline bool CommandRes_KvRet::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommandRes_KvRet::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommandRes_KvRet::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommandRes_KvRet::clear_status() {
  status_ = false;
  clear_has_status();
}
inline bool CommandRes_KvRet::status() const {
  return status_;
}
inline void CommandRes_KvRet::set_status(bool value) {
  set_has_status();
  status_ = value;
}

// optional bytes value = 2;
inline bool CommandRes_KvRet::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommandRes_KvRet::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CommandRes_KvRet::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CommandRes_KvRet::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& CommandRes_KvRet::value() const {
  return *value_;
}
inline void CommandRes_KvRet::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void CommandRes_KvRet::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void CommandRes_KvRet::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CommandRes_KvRet::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* CommandRes_KvRet::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CommandRes_KvRet::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CommandRes_KvAllRet

// required bool status = 1;
inline bool CommandRes_KvAllRet::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommandRes_KvAllRet::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommandRes_KvAllRet::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommandRes_KvAllRet::clear_status() {
  status_ = false;
  clear_has_status();
}
inline bool CommandRes_KvAllRet::status() const {
  return status_;
}
inline void CommandRes_KvAllRet::set_status(bool value) {
  set_has_status();
  status_ = value;
}

// repeated .command.CommandRes.Kv kvall = 2;
inline int CommandRes_KvAllRet::kvall_size() const {
  return kvall_.size();
}
inline void CommandRes_KvAllRet::clear_kvall() {
  kvall_.Clear();
}
inline const ::command::CommandRes_Kv& CommandRes_KvAllRet::kvall(int index) const {
  return kvall_.Get(index);
}
inline ::command::CommandRes_Kv* CommandRes_KvAllRet::mutable_kvall(int index) {
  return kvall_.Mutable(index);
}
inline ::command::CommandRes_Kv* CommandRes_KvAllRet::add_kvall() {
  return kvall_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::command::CommandRes_Kv >&
CommandRes_KvAllRet::kvall() const {
  return kvall_;
}
inline ::google::protobuf::RepeatedPtrField< ::command::CommandRes_Kv >*
CommandRes_KvAllRet::mutable_kvall() {
  return &kvall_;
}

// -------------------------------------------------------------------

// CommandRes_RaftStageRes

// required uint64 term = 1;
inline bool CommandRes_RaftStageRes::has_term() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommandRes_RaftStageRes::set_has_term() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommandRes_RaftStageRes::clear_has_term() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommandRes_RaftStageRes::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
  clear_has_term();
}
inline ::google::protobuf::uint64 CommandRes_RaftStageRes::term() const {
  return term_;
}
inline void CommandRes_RaftStageRes::set_term(::google::protobuf::uint64 value) {
  set_has_term();
  term_ = value;
}

// required uint64 commit_index = 2;
inline bool CommandRes_RaftStageRes::has_commit_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommandRes_RaftStageRes::set_has_commit_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CommandRes_RaftStageRes::clear_has_commit_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CommandRes_RaftStageRes::clear_commit_index() {
  commit_index_ = GOOGLE_ULONGLONG(0);
  clear_has_commit_index();
}
inline ::google::protobuf::uint64 CommandRes_RaftStageRes::commit_index() const {
  return commit_index_;
}
inline void CommandRes_RaftStageRes::set_commit_index(::google::protobuf::uint64 value) {
  set_has_commit_index();
  commit_index_ = value;
}

// required bytes role = 3;
inline bool CommandRes_RaftStageRes::has_role() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CommandRes_RaftStageRes::set_has_role() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CommandRes_RaftStageRes::clear_has_role() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CommandRes_RaftStageRes::clear_role() {
  if (role_ != &::google::protobuf::internal::kEmptyString) {
    role_->clear();
  }
  clear_has_role();
}
inline const ::std::string& CommandRes_RaftStageRes::role() const {
  return *role_;
}
inline void CommandRes_RaftStageRes::set_role(const ::std::string& value) {
  set_has_role();
  if (role_ == &::google::protobuf::internal::kEmptyString) {
    role_ = new ::std::string;
  }
  role_->assign(value);
}
inline void CommandRes_RaftStageRes::set_role(const char* value) {
  set_has_role();
  if (role_ == &::google::protobuf::internal::kEmptyString) {
    role_ = new ::std::string;
  }
  role_->assign(value);
}
inline void CommandRes_RaftStageRes::set_role(const void* value, size_t size) {
  set_has_role();
  if (role_ == &::google::protobuf::internal::kEmptyString) {
    role_ = new ::std::string;
  }
  role_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CommandRes_RaftStageRes::mutable_role() {
  set_has_role();
  if (role_ == &::google::protobuf::internal::kEmptyString) {
    role_ = new ::std::string;
  }
  return role_;
}
inline ::std::string* CommandRes_RaftStageRes::release_role() {
  clear_has_role();
  if (role_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_;
    role_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CommandRes_RaftStageRes::set_allocated_role(::std::string* role) {
  if (role_ != &::google::protobuf::internal::kEmptyString) {
    delete role_;
  }
  if (role) {
    set_has_role();
    role_ = role;
  } else {
    clear_has_role();
    role_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes leader_ip = 4;
inline bool CommandRes_RaftStageRes::has_leader_ip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CommandRes_RaftStageRes::set_has_leader_ip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CommandRes_RaftStageRes::clear_has_leader_ip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CommandRes_RaftStageRes::clear_leader_ip() {
  if (leader_ip_ != &::google::protobuf::internal::kEmptyString) {
    leader_ip_->clear();
  }
  clear_has_leader_ip();
}
inline const ::std::string& CommandRes_RaftStageRes::leader_ip() const {
  return *leader_ip_;
}
inline void CommandRes_RaftStageRes::set_leader_ip(const ::std::string& value) {
  set_has_leader_ip();
  if (leader_ip_ == &::google::protobuf::internal::kEmptyString) {
    leader_ip_ = new ::std::string;
  }
  leader_ip_->assign(value);
}
inline void CommandRes_RaftStageRes::set_leader_ip(const char* value) {
  set_has_leader_ip();
  if (leader_ip_ == &::google::protobuf::internal::kEmptyString) {
    leader_ip_ = new ::std::string;
  }
  leader_ip_->assign(value);
}
inline void CommandRes_RaftStageRes::set_leader_ip(const void* value, size_t size) {
  set_has_leader_ip();
  if (leader_ip_ == &::google::protobuf::internal::kEmptyString) {
    leader_ip_ = new ::std::string;
  }
  leader_ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CommandRes_RaftStageRes::mutable_leader_ip() {
  set_has_leader_ip();
  if (leader_ip_ == &::google::protobuf::internal::kEmptyString) {
    leader_ip_ = new ::std::string;
  }
  return leader_ip_;
}
inline ::std::string* CommandRes_RaftStageRes::release_leader_ip() {
  clear_has_leader_ip();
  if (leader_ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = leader_ip_;
    leader_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CommandRes_RaftStageRes::set_allocated_leader_ip(::std::string* leader_ip) {
  if (leader_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete leader_ip_;
  }
  if (leader_ip) {
    set_has_leader_ip();
    leader_ip_ = leader_ip;
  } else {
    clear_has_leader_ip();
    leader_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 leader_port = 5;
inline bool CommandRes_RaftStageRes::has_leader_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CommandRes_RaftStageRes::set_has_leader_port() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CommandRes_RaftStageRes::clear_has_leader_port() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CommandRes_RaftStageRes::clear_leader_port() {
  leader_port_ = 0;
  clear_has_leader_port();
}
inline ::google::protobuf::int32 CommandRes_RaftStageRes::leader_port() const {
  return leader_port_;
}
inline void CommandRes_RaftStageRes::set_leader_port(::google::protobuf::int32 value) {
  set_has_leader_port();
  leader_port_ = value;
}

// required bytes voted_for_ip = 6;
inline bool CommandRes_RaftStageRes::has_voted_for_ip() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CommandRes_RaftStageRes::set_has_voted_for_ip() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CommandRes_RaftStageRes::clear_has_voted_for_ip() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CommandRes_RaftStageRes::clear_voted_for_ip() {
  if (voted_for_ip_ != &::google::protobuf::internal::kEmptyString) {
    voted_for_ip_->clear();
  }
  clear_has_voted_for_ip();
}
inline const ::std::string& CommandRes_RaftStageRes::voted_for_ip() const {
  return *voted_for_ip_;
}
inline void CommandRes_RaftStageRes::set_voted_for_ip(const ::std::string& value) {
  set_has_voted_for_ip();
  if (voted_for_ip_ == &::google::protobuf::internal::kEmptyString) {
    voted_for_ip_ = new ::std::string;
  }
  voted_for_ip_->assign(value);
}
inline void CommandRes_RaftStageRes::set_voted_for_ip(const char* value) {
  set_has_voted_for_ip();
  if (voted_for_ip_ == &::google::protobuf::internal::kEmptyString) {
    voted_for_ip_ = new ::std::string;
  }
  voted_for_ip_->assign(value);
}
inline void CommandRes_RaftStageRes::set_voted_for_ip(const void* value, size_t size) {
  set_has_voted_for_ip();
  if (voted_for_ip_ == &::google::protobuf::internal::kEmptyString) {
    voted_for_ip_ = new ::std::string;
  }
  voted_for_ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CommandRes_RaftStageRes::mutable_voted_for_ip() {
  set_has_voted_for_ip();
  if (voted_for_ip_ == &::google::protobuf::internal::kEmptyString) {
    voted_for_ip_ = new ::std::string;
  }
  return voted_for_ip_;
}
inline ::std::string* CommandRes_RaftStageRes::release_voted_for_ip() {
  clear_has_voted_for_ip();
  if (voted_for_ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = voted_for_ip_;
    voted_for_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CommandRes_RaftStageRes::set_allocated_voted_for_ip(::std::string* voted_for_ip) {
  if (voted_for_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete voted_for_ip_;
  }
  if (voted_for_ip) {
    set_has_voted_for_ip();
    voted_for_ip_ = voted_for_ip;
  } else {
    clear_has_voted_for_ip();
    voted_for_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 voted_for_port = 7;
inline bool CommandRes_RaftStageRes::has_voted_for_port() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CommandRes_RaftStageRes::set_has_voted_for_port() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CommandRes_RaftStageRes::clear_has_voted_for_port() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CommandRes_RaftStageRes::clear_voted_for_port() {
  voted_for_port_ = 0;
  clear_has_voted_for_port();
}
inline ::google::protobuf::int32 CommandRes_RaftStageRes::voted_for_port() const {
  return voted_for_port_;
}
inline void CommandRes_RaftStageRes::set_voted_for_port(::google::protobuf::int32 value) {
  set_has_voted_for_port();
  voted_for_port_ = value;
}

// required uint64 last_log_term = 8;
inline bool CommandRes_RaftStageRes::has_last_log_term() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CommandRes_RaftStageRes::set_has_last_log_term() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CommandRes_RaftStageRes::clear_has_last_log_term() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CommandRes_RaftStageRes::clear_last_log_term() {
  last_log_term_ = GOOGLE_ULONGLONG(0);
  clear_has_last_log_term();
}
inline ::google::protobuf::uint64 CommandRes_RaftStageRes::last_log_term() const {
  return last_log_term_;
}
inline void CommandRes_RaftStageRes::set_last_log_term(::google::protobuf::uint64 value) {
  set_has_last_log_term();
  last_log_term_ = value;
}

// required uint64 last_log_index = 9;
inline bool CommandRes_RaftStageRes::has_last_log_index() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CommandRes_RaftStageRes::set_has_last_log_index() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CommandRes_RaftStageRes::clear_has_last_log_index() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CommandRes_RaftStageRes::clear_last_log_index() {
  last_log_index_ = GOOGLE_ULONGLONG(0);
  clear_has_last_log_index();
}
inline ::google::protobuf::uint64 CommandRes_RaftStageRes::last_log_index() const {
  return last_log_index_;
}
inline void CommandRes_RaftStageRes::set_last_log_index(::google::protobuf::uint64 value) {
  set_has_last_log_index();
  last_log_index_ = value;
}

// required uint64 last_apply_index = 10;
inline bool CommandRes_RaftStageRes::has_last_apply_index() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CommandRes_RaftStageRes::set_has_last_apply_index() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CommandRes_RaftStageRes::clear_has_last_apply_index() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CommandRes_RaftStageRes::clear_last_apply_index() {
  last_apply_index_ = GOOGLE_ULONGLONG(0);
  clear_has_last_apply_index();
}
inline ::google::protobuf::uint64 CommandRes_RaftStageRes::last_apply_index() const {
  return last_apply_index_;
}
inline void CommandRes_RaftStageRes::set_last_apply_index(::google::protobuf::uint64 value) {
  set_has_last_apply_index();
  last_apply_index_ = value;
}

// -------------------------------------------------------------------

// CommandRes

// required .command.CommandRes.Type type = 1;
inline bool CommandRes::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommandRes::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommandRes::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommandRes::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::command::CommandRes_Type CommandRes::type() const {
  return static_cast< ::command::CommandRes_Type >(type_);
}
inline void CommandRes::set_type(::command::CommandRes_Type value) {
  assert(::command::CommandRes_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .command.CommandRes.KvRet kvr = 2;
inline bool CommandRes::has_kvr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommandRes::set_has_kvr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CommandRes::clear_has_kvr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CommandRes::clear_kvr() {
  if (kvr_ != NULL) kvr_->::command::CommandRes_KvRet::Clear();
  clear_has_kvr();
}
inline const ::command::CommandRes_KvRet& CommandRes::kvr() const {
  return kvr_ != NULL ? *kvr_ : *default_instance_->kvr_;
}
inline ::command::CommandRes_KvRet* CommandRes::mutable_kvr() {
  set_has_kvr();
  if (kvr_ == NULL) kvr_ = new ::command::CommandRes_KvRet;
  return kvr_;
}
inline ::command::CommandRes_KvRet* CommandRes::release_kvr() {
  clear_has_kvr();
  ::command::CommandRes_KvRet* temp = kvr_;
  kvr_ = NULL;
  return temp;
}
inline void CommandRes::set_allocated_kvr(::command::CommandRes_KvRet* kvr) {
  delete kvr_;
  kvr_ = kvr;
  if (kvr) {
    set_has_kvr();
  } else {
    clear_has_kvr();
  }
}

// optional .command.CommandRes.KvAllRet kvallr = 3;
inline bool CommandRes::has_kvallr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CommandRes::set_has_kvallr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CommandRes::clear_has_kvallr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CommandRes::clear_kvallr() {
  if (kvallr_ != NULL) kvallr_->::command::CommandRes_KvAllRet::Clear();
  clear_has_kvallr();
}
inline const ::command::CommandRes_KvAllRet& CommandRes::kvallr() const {
  return kvallr_ != NULL ? *kvallr_ : *default_instance_->kvallr_;
}
inline ::command::CommandRes_KvAllRet* CommandRes::mutable_kvallr() {
  set_has_kvallr();
  if (kvallr_ == NULL) kvallr_ = new ::command::CommandRes_KvAllRet;
  return kvallr_;
}
inline ::command::CommandRes_KvAllRet* CommandRes::release_kvallr() {
  clear_has_kvallr();
  ::command::CommandRes_KvAllRet* temp = kvallr_;
  kvallr_ = NULL;
  return temp;
}
inline void CommandRes::set_allocated_kvallr(::command::CommandRes_KvAllRet* kvallr) {
  delete kvallr_;
  kvallr_ = kvallr;
  if (kvallr) {
    set_has_kvallr();
  } else {
    clear_has_kvallr();
  }
}

// optional .floyd.raft.ResponseVote rsv = 4;
inline bool CommandRes::has_rsv() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CommandRes::set_has_rsv() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CommandRes::clear_has_rsv() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CommandRes::clear_rsv() {
  if (rsv_ != NULL) rsv_->::floyd::raft::ResponseVote::Clear();
  clear_has_rsv();
}
inline const ::floyd::raft::ResponseVote& CommandRes::rsv() const {
  return rsv_ != NULL ? *rsv_ : *default_instance_->rsv_;
}
inline ::floyd::raft::ResponseVote* CommandRes::mutable_rsv() {
  set_has_rsv();
  if (rsv_ == NULL) rsv_ = new ::floyd::raft::ResponseVote;
  return rsv_;
}
inline ::floyd::raft::ResponseVote* CommandRes::release_rsv() {
  clear_has_rsv();
  ::floyd::raft::ResponseVote* temp = rsv_;
  rsv_ = NULL;
  return temp;
}
inline void CommandRes::set_allocated_rsv(::floyd::raft::ResponseVote* rsv) {
  delete rsv_;
  rsv_ = rsv;
  if (rsv) {
    set_has_rsv();
  } else {
    clear_has_rsv();
  }
}

// optional .floyd.raft.AppendEntriesResponse aers = 5;
inline bool CommandRes::has_aers() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CommandRes::set_has_aers() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CommandRes::clear_has_aers() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CommandRes::clear_aers() {
  if (aers_ != NULL) aers_->::floyd::raft::AppendEntriesResponse::Clear();
  clear_has_aers();
}
inline const ::floyd::raft::AppendEntriesResponse& CommandRes::aers() const {
  return aers_ != NULL ? *aers_ : *default_instance_->aers_;
}
inline ::floyd::raft::AppendEntriesResponse* CommandRes::mutable_aers() {
  set_has_aers();
  if (aers_ == NULL) aers_ = new ::floyd::raft::AppendEntriesResponse;
  return aers_;
}
inline ::floyd::raft::AppendEntriesResponse* CommandRes::release_aers() {
  clear_has_aers();
  ::floyd::raft::AppendEntriesResponse* temp = aers_;
  aers_ = NULL;
  return temp;
}
inline void CommandRes::set_allocated_aers(::floyd::raft::AppendEntriesResponse* aers) {
  delete aers_;
  aers_ = aers;
  if (aers) {
    set_has_aers();
  } else {
    clear_has_aers();
  }
}

// optional .command.CommandRes.RaftStageRes raftstage = 6;
inline bool CommandRes::has_raftstage() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CommandRes::set_has_raftstage() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CommandRes::clear_has_raftstage() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CommandRes::clear_raftstage() {
  if (raftstage_ != NULL) raftstage_->::command::CommandRes_RaftStageRes::Clear();
  clear_has_raftstage();
}
inline const ::command::CommandRes_RaftStageRes& CommandRes::raftstage() const {
  return raftstage_ != NULL ? *raftstage_ : *default_instance_->raftstage_;
}
inline ::command::CommandRes_RaftStageRes* CommandRes::mutable_raftstage() {
  set_has_raftstage();
  if (raftstage_ == NULL) raftstage_ = new ::command::CommandRes_RaftStageRes;
  return raftstage_;
}
inline ::command::CommandRes_RaftStageRes* CommandRes::release_raftstage() {
  clear_has_raftstage();
  ::command::CommandRes_RaftStageRes* temp = raftstage_;
  raftstage_ = NULL;
  return temp;
}
inline void CommandRes::set_allocated_raftstage(::command::CommandRes_RaftStageRes* raftstage) {
  delete raftstage_;
  raftstage_ = raftstage;
  if (raftstage) {
    set_has_raftstage();
  } else {
    clear_has_raftstage();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace command

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::command::Command_Type>() {
  return ::command::Command_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::command::CommandRes_Type>() {
  return ::command::CommandRes_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_command_2eproto__INCLUDED
